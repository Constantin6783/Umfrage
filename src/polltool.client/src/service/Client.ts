//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

export class Client {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl ?? "";
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    getPolls(body: BaseRequest | undefined): Promise<GetPollsResponse> {
        let url_ = this.baseUrl + "/api/Polls/GetPolls";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetPolls(_response);
        });
    }

    protected processGetPolls(response: Response): Promise<GetPollsResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200: any = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = GetPollsResponse.fromJS(resultData200);
                return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<GetPollsResponse>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    createPoll(body: CreatePollRequest | undefined): Promise<CreatePollResponse> {
        let url_ = this.baseUrl + "/api/Polls/CreatePoll";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreatePoll(_response);
        });
    }

    protected processCreatePoll(response: Response): Promise<CreatePollResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200: any = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = CreatePollResponse.fromJS(resultData200);
                return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CreatePollResponse>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    deletePoll(body: DeletePollRequest | undefined): Promise<BaseResponse> {
        let url_ = this.baseUrl + "/api/Polls/DeletePoll";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeletePoll(_response);
        });
    }

    protected processDeletePoll(response: Response): Promise<BaseResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200: any = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = BaseResponse.fromJS(resultData200);
                return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<BaseResponse>(null as any);
    }
}

export class Answer implements IAnswer {
    answerId?: number;
    text?: string | undefined;
    questionId?: number;

    constructor(data?: IAnswer) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.answerId = _data["answerId"];
            this.text = _data["text"];
            this.questionId = _data["questionId"];
        }
    }

    static fromJS(data: any): Answer {
        data = typeof data === 'object' ? data : {};
        let result = new Answer();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["answerId"] = this.answerId;
        data["text"] = this.text;
        data["questionId"] = this.questionId;
        return data;
    }
}

export interface IAnswer {
    answerId?: number;
    text?: string | undefined;
    questionId?: number;
}

export class BaseRequest implements IBaseRequest {
    apiKey?: string | undefined;

    constructor(data?: IBaseRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.apiKey = _data["apiKey"];
        }
    }

    static fromJS(data: any): BaseRequest {
        data = typeof data === 'object' ? data : {};
        let result = new BaseRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["apiKey"] = this.apiKey;
        return data;
    }
}

export interface IBaseRequest {
    apiKey?: string | undefined;
}

export class BaseResponse implements IBaseResponse {
    success?: boolean;
    errorMessage?: string | undefined;

    constructor(data?: IBaseResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.errorMessage = _data["errorMessage"];
        }
    }

    static fromJS(data: any): BaseResponse {
        data = typeof data === 'object' ? data : {};
        let result = new BaseResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["errorMessage"] = this.errorMessage;
        return data;
    }
}

export interface IBaseResponse {
    success?: boolean;
    errorMessage?: string | undefined;
}

export class CreatePollRequest implements ICreatePollRequest {
    apiKey?: string | undefined;
    title?: string | undefined;
    description?: string | undefined;
    answers?: Answer[] | undefined;

    constructor(data?: ICreatePollRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.apiKey = _data["apiKey"];
            this.title = _data["title"];
            this.description = _data["description"];
            if (Array.isArray(_data["answers"])) {
                this.answers = [] as any;
                for (let item of _data["answers"])
                    this.answers!.push(Answer.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CreatePollRequest {
        data = typeof data === 'object' ? data : {};
        let result = new CreatePollRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["apiKey"] = this.apiKey;
        data["title"] = this.title;
        data["description"] = this.description;
        if (Array.isArray(this.answers)) {
            data["answers"] = [];
            for (let item of this.answers)
                data["answers"].push(item.toJSON());
        }
        return data;
    }
}

export interface ICreatePollRequest {
    apiKey?: string | undefined;
    title?: string | undefined;
    description?: string | undefined;
    answers?: Answer[] | undefined;
}

export class CreatePollResponse implements ICreatePollResponse {
    success?: boolean;
    errorMessage?: string | undefined;

    constructor(data?: ICreatePollResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.errorMessage = _data["errorMessage"];
        }
    }

    static fromJS(data: any): CreatePollResponse {
        data = typeof data === 'object' ? data : {};
        let result = new CreatePollResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["errorMessage"] = this.errorMessage;
        return data;
    }
}

export interface ICreatePollResponse {
    success?: boolean;
    errorMessage?: string | undefined;
}

export class DeletePollRequest implements IDeletePollRequest {
    apiKey?: string | undefined;
    pollID?: number;

    constructor(data?: IDeletePollRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.apiKey = _data["apiKey"];
            this.pollID = _data["pollID"];
        }
    }

    static fromJS(data: any): DeletePollRequest {
        data = typeof data === 'object' ? data : {};
        let result = new DeletePollRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["apiKey"] = this.apiKey;
        data["pollID"] = this.pollID;
        return data;
    }
}

export interface IDeletePollRequest {
    apiKey?: string | undefined;
    pollID?: number;
}

export class GetPollsResponse implements IGetPollsResponse {
    success?: boolean;
    errorMessage?: string | undefined;
    polls?: Poll[] | undefined;

    constructor(data?: IGetPollsResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.errorMessage = _data["errorMessage"];
            if (Array.isArray(_data["polls"])) {
                this.polls = [] as any;
                for (let item of _data["polls"])
                    this.polls!.push(Poll.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetPollsResponse {
        data = typeof data === 'object' ? data : {};
        let result = new GetPollsResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["errorMessage"] = this.errorMessage;
        if (Array.isArray(this.polls)) {
            data["polls"] = [];
            for (let item of this.polls)
                data["polls"].push(item.toJSON());
        }
        return data;
    }
}

export interface IGetPollsResponse {
    success?: boolean;
    errorMessage?: string | undefined;
    polls?: Poll[] | undefined;
}

export class Poll implements IPoll {
    pollId?: number;
    title?: string | undefined;
    description?: string | undefined;
    doneByUser?: boolean;
    readonly ownedByUser?: boolean;

    constructor(data?: IPoll) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.pollId = _data["pollId"];
            this.title = _data["title"];
            this.description = _data["description"];
            this.doneByUser = _data["doneByUser"];
            (<any>this).ownedByUser = _data["ownedByUser"];
        }
    }

    static fromJS(data: any): Poll {
        data = typeof data === 'object' ? data : {};
        let result = new Poll();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["pollId"] = this.pollId;
        data["title"] = this.title;
        data["description"] = this.description;
        data["doneByUser"] = this.doneByUser;
        data["ownedByUser"] = this.ownedByUser;
        return data;
    }
}

export interface IPoll {
    pollId?: number;
    title?: string | undefined;
    description?: string | undefined;
    doneByUser?: boolean;
    ownedByUser?: boolean;
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}